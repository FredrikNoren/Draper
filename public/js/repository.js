var idCounter=0,newId=function(){return idCounter++},RepositoryViewModel=function(e,t){var n=this;this.status=ko.observable("loading"),this.remoteErrorPopup=ko.observable(),visitedRepositories.tryAdd(t),this.main=e,this.repoPath=t,this.gerritIntegration=ko.observable(null),this.fetchingProgressBar=new ProgressBarViewModel("fetching-"+this.repoPath),this.graph=new GitGraphViewModel(this),this.staging=new StagingViewModel(this),this.showFetchButton=ko.computed(function(){return n.graph.hasRemotes()}),this.updateStatus(),this.watcherReady=ko.observable(!1),this.showLog=ko.computed(function(){return!n.staging.inRebase()&&!n.staging.inMerge()}),this.status.subscribe(function(e){"inited"==e&&(n.update(),n.fetch(),api.repositoryChanged.add(function(e){e.repository&&e.repository!=n.repoPath||n.update()}),api.watchRepository(t,function(){n.watcherReady(!0)}),ungit.config.gerrit&&n.gerritIntegration(new GerritIntegrationViewModel(n)))})};RepositoryViewModel.prototype.update=function(){this.updateStatus(),this.updateLog(),this.updateBranches(),this.updateRemotes(),this.staging.invalidateFilesDiffs()},RepositoryViewModel.prototype.closeRemoteErrorPopup=function(){this.remoteErrorPopup(null)},RepositoryViewModel.prototype.updateAnimationFrame=function(e){this.graph.updateAnimationFrame(e)},RepositoryViewModel.prototype.fetch=function(){if("inited"==this.status()){var e=this;this.fetchingProgressBar.start(),api.query("POST","/fetch",{path:this.repoPath},function(t){if(e.fetchingProgressBar.stop(),t){if("remote-timeout"==t.errorCode)return e.remoteErrorPopup("Repository remote timeouted."),!0;if("permision-denied-publickey"==t.errorCode)return e.remoteErrorPopup("Permission denied (publickey)."),!0;if("no-supported-authentication-provided"==t.errorCode)return e.main.content(new UserErrorViewModel({title:"Authentication error",details:"No supported authentication methods available. Try starting ssh-agent or pageant."})),!0;if("offline"==t.errorCode)return e.remoteErrorPopup("Couldn't reach remote repository, are you offline?"),!0}})}},RepositoryViewModel.prototype.updateStatus=function(e){var t=this;api.query("GET","/status",{path:this.repoPath},function(n,r){if(!n){if(t.status("inited"),t.staging.setFiles(r.files),t.staging.inRebase(!!r.inRebase),t.staging.inMerge(!!r.inMerge),r.inMerge){var i=r.commitMessage.split("\n");t.staging.commitMessageTitle(i[0]),t.staging.commitMessageBody(i.slice(1).join("\n"))}e&&e()}})},RepositoryViewModel.prototype.updateLog=function(){"inited"==this.status()&&this.graph.loadNodesFromApi()},RepositoryViewModel.prototype.updateBranches=function(){if("inited"==this.status()){var e=this;api.query("GET","/checkout",{path:this.repoPath},function(t,n){return t&&"not-a-repository"==t.errorCode?!0:(t||e.graph.activeBranch(n),void 0)})}},RepositoryViewModel.prototype.updateRemotes=function(){if("inited"==this.status()){var e=this;api.query("GET","/remotes",{path:this.repoPath},function(t,n){return t&&"not-a-repository"==t.errorCode?!0:(t||(e.graph.hasRemotes(0!=n.length),e.graph.loadRemoteTagsFromApi()),void 0)})}},RepositoryViewModel.prototype.toogleShowBranches=function(){this.showBranches(!this.showBranches())},RepositoryViewModel.prototype.createNewBranch=function(){api.query("POST","/branches",{path:this.repoPath,name:this.newBranchName()}),this.newBranchName("")};var StagingViewModel=function(e){var t=this;this.repository=e,this.repoPath=this.repository.repoPath,this.filesByPath={},this.files=ko.observable([]),this.commitMessageTitle=ko.observable(),this.commitMessageBody=ko.observable(),this.inRebase=ko.observable(!1),this.inMerge=ko.observable(!1),this.commitButtonVisible=ko.computed(function(){return!t.inRebase()&&!t.inMerge()}),this.nFiles=ko.computed(function(){return t.files().length}),this.nStagedFiles=ko.computed(function(){return t.files().filter(function(e){return e.staged()}).length}),this.stats=ko.computed(function(){return t.nFiles()+" files, "+t.nStagedFiles()+" to be commited"}),this.amend=ko.observable(!1),this.canAmend=ko.computed(function(){return t.repository.graph.HEAD()&&!t.inRebase()&&!t.inMerge()}),this.showNux=ko.computed(function(){return 0==t.files().length&&!t.amend()}),this.committingProgressBar=new ProgressBarViewModel("committing-"+e.repoPath),this.rebaseContinueProgressBar=new ProgressBarViewModel("rebase-continue-"+e.repoPath),this.rebaseAbortProgressBar=new ProgressBarViewModel("rebase-abort-"+e.repoPath),this.mergeContinueProgressBar=new ProgressBarViewModel("merge-continue-"+e.repoPath),this.mergeAbortProgressBar=new ProgressBarViewModel("merge-abort-"+e.repoPath),this.commitValidationError=ko.computed(function(){return t.amend()||t.files().some(function(e){return e.staged()})?t.files().some(function(e){return e.conflict()})?"Files in conflict":t.commitMessageTitle()||t.inRebase()?"":"Provide a title":"No files to commit"})};StagingViewModel.prototype.setFiles=function(e){var t=this,n=[];for(var r in e){var i=this.filesByPath[r];i||(this.filesByPath[r]=i=new FileViewModel(t),i.name(r)),i.isNew(e[r].isNew),i.removed(e[r].removed),i.conflict(e[r].conflict),i.invalidateDiff(),n.push(i)}this.files(n)},StagingViewModel.prototype.toogleAmend=function(){this.amend()||this.commitMessageTitle()?this.amend()&&(this.commitMessageTitle(""),this.commitMessageBody("")):(this.commitMessageTitle(this.repository.graph.HEAD().title),this.commitMessageBody(this.repository.graph.HEAD().body)),this.amend(!this.amend())},StagingViewModel.prototype.commit=function(){var e=this;this.committingProgressBar.start();var t=this.files().filter(function(e){return e.staged()}).map(function(e){return e.name()}),n=this.commitMessageTitle();this.commitMessageBody()&&(n+="\n\n"+this.commitMessageBody()),api.query("POST","/commit",{path:this.repository.repoPath,message:n,files:t,amend:this.amend()},function(t){if(t){if("no-git-name-email-configured"==t.errorCode)return e.repository.main.content(new UserErrorViewModel({title:"Git email and/or name not configured",details:'You need to configure your git email and username to commit files.<br> Run <code>git config --global user.name "your name"</code> and <code>git config --global user.email "your@email.com"</code>'})),!0}else e.commitMessageTitle(""),e.commitMessageBody(""),e.amend(!1),e.files([]),e.committingProgressBar.stop()})},StagingViewModel.prototype.rebaseContinue=function(){var e=this;this.rebaseContinueProgressBar.start(),api.query("POST","/rebase/continue",{path:this.repository.repoPath},function(){e.rebaseContinueProgressBar.stop()})},StagingViewModel.prototype.rebaseAbort=function(){var e=this;this.rebaseAbortProgressBar.start(),api.query("POST","/rebase/abort",{path:this.repository.repoPath},function(){e.rebaseAbortProgressBar.stop()})},StagingViewModel.prototype.mergeContinue=function(){var e=this;this.mergeContinueProgressBar.start();var t=this.commitMessageTitle();this.commitMessageBody()&&(t+="\n\n"+this.commitMessageBody()),api.query("POST","/merge/continue",{path:this.repository.repoPath,message:t},function(){e.mergeContinueProgressBar.stop()})},StagingViewModel.prototype.mergeAbort=function(){var e=this;this.mergeAbortProgressBar.start(),api.query("POST","/merge/abort",{path:this.repository.repoPath},function(){e.mergeAbortProgressBar.stop()})},StagingViewModel.prototype.invalidateFilesDiffs=function(){this.files().forEach(function(e){e.invalidateDiff(!1)})},StagingViewModel.prototype.discardAllChanges=function(){api.query("POST","/discardchanges",{path:this.repository.repoPath,all:!0})};var FileViewModel=function(e){this.staging=e,this.staged=ko.observable(!0),this.name=ko.observable(),this.isNew=ko.observable(!1),this.removed=ko.observable(!1),this.conflict=ko.observable(!1),this.diffs=ko.observable([]),this.showingDiffs=ko.observable(!1),this.diffsProgressBar=new ProgressBarViewModel("diffs-"+this.staging.repository.repoPath)};FileViewModel.prototype.toogleStaged=function(){this.staged(!this.staged())},FileViewModel.prototype.discardChanges=function(){api.query("POST","/discardchanges",{path:this.staging.repository.repoPath,file:this.name()})},FileViewModel.prototype.resolveConflict=function(){api.query("POST","/resolveconflicts",{path:this.staging.repository.repoPath,files:[this.name()]})},FileViewModel.prototype.toogleDiffs=function(){this.showingDiffs()?this.showingDiffs(!1):(this.showingDiffs(!0),this.invalidateDiff(!0))},FileViewModel.prototype.invalidateDiff=function(e){var t=this;this.showingDiffs()&&(e&&this.diffsProgressBar.start(),api.query("GET","/diff",{file:this.name(),path:this.staging.repository.repoPath},function(n,r){if(e&&t.diffsProgressBar.stop(),!n){var i=[];r.forEach(function(e){e.lines.forEach(function(e){i.push({oldLineNumber:e[0],newLineNumber:e[1],added:"+"==e[2][0],removed:"-"==e[2][0]||"\\"==e[2][0],text:e[2]})})}),t.diffs(i)}}))};