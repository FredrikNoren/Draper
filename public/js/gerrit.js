var GerritIntegrationViewModel=function(e){this.repository=e,this.showInitCommmitHook=ko.observable(!1),this.status=ko.observable("loading"),this.initGerritHookProgressBar=new ProgressBarViewModel("gerrit-init-hook-"+e.repoPath,4e3),this.changesLoader=new ProgressBarViewModel("gerrit-changes-"+e.repoPath,4e3),this.pushingProgressBar=new ProgressBarViewModel("gerrit-push-"+e.repoPath,4e3),this.changes=ko.observable(),this.updateCommitHook(),this.updateChanges()};GerritIntegrationViewModel.prototype.updateCommitHook=function(){var e=this;api.query("GET","/gerrit/commithook",{path:this.repository.repoPath},function(t,n){e.showInitCommmitHook(!n.exists)})},GerritIntegrationViewModel.prototype.updateChanges=function(){var e=this;e.status("loading"),this.changesLoader.start(),api.query("GET","/gerrit/changes",{path:this.repository.repoPath},function(t,n){return e.changesLoader.stop(),t?(e.status("failed"),"permision-denied-publickey"==t.errorCode?(e.repository.remoteErrorPopup("Permission denied (publickey)."),!0):!0):(e.changes(n.slice(0,n.length-1).map(function(t){return new GerritChangeViewModel(e,t)})),e.status("loaded"),void 0)})},GerritIntegrationViewModel.prototype.initCommitHook=function(){var e=this;this.initGerritHookProgressBar.start(),api.query("POST","/gerrit/commithook",{path:this.repository.repoPath},function(){e.updateCommitHook(),e.initGerritHookProgressBar.stop()})},GerritIntegrationViewModel.prototype.getChange=function(e){return _.find(this.changes(),function(t){return t.data.id==e})},GerritIntegrationViewModel.prototype.getChangeIdFromMessage=function(e){var t=_.last(e.split("\n")).trim();return t&&0==t.indexOf("Change-Id: ")?t.slice("Change-Id: ".length).trim():void 0},GerritIntegrationViewModel.prototype.getChangeFromNode=function(e){var t=this.getChangeIdFromMessage(e.message);if(t)return this.getChange(t)},GerritIntegrationViewModel.prototype.pushForReview=function(){var e=this;this.pushingProgressBar.start();var t=this.repository.graph.activeBranch(),n=this.getChangeFromNode(this.repository.graph.HEAD());n&&(t=n.data.branch),api.query("POST","/push",{path:this.repository.graph.repoPath,socketId:api.socketId,remoteBranch:"refs/for/"+t},function(){e.updateChanges(),e.pushingProgressBar.stop()})};var GerritChangeViewModel=function(e,t){this.gerritIntegration=e,this.subject=t.subject,this.ownerName=t.owner.name,this.sha1=t.sha1,this.data=t,this.gerritUrl=this.data.url,this.checkingOutProgressBar=new ProgressBarViewModel("gerrit-checkout-"+repository.repoPath,4e3),this.cherryPickingProgressBar=new ProgressBarViewModel("gerrit-cherry-pick-"+repository.repoPath,4e3)};GerritChangeViewModel.prototype.checkout=function(){var e=this;this.checkingOutProgressBar.start(),api.query("POST","/fetch",{path:this.gerritIntegration.repository.repoPath,ref:this.data.currentPatchSet.ref},function(){api.query("POST","/checkout",{path:e.gerritIntegration.repository.repoPath,name:"FETCH_HEAD"},function(){e.checkingOutProgressBar.stop()})})},GerritChangeViewModel.prototype.cherryPick=function(){var e=this;this.cherryPickingProgressBar.start(),api.query("POST","/fetch",{path:this.gerritIntegration.repository.repoPath,ref:this.data.currentPatchSet.ref},function(){api.query("POST","/cherrypick",{path:e.gerritIntegration.repository.repoPath,name:"FETCH_HEAD"},function(){e.cherryPickingProgressBar.stop()})})};